apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.justinraczak.android.movies"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'THE_MOVIE_DB_API_KEY', "\"619590eb3ab5488f71b3fb9de8a736fe\""
    }
}

repositories {
    mavenCentral()
}

//repositories {
//    mavenLocal()
//}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.android.support:cardview-v7:23.2.1'
    compile 'com.android.support:recyclerview-v7:23.2.1'
    compile 'com.android.support:support-v4:23.2.1'
    compile 'com.android.support:appcompat-v7:23.2.1'

    testCompile 'junit:junit:4.12'
    testCompile 'io.appium:java-client:4.1.1'
    testCompile 'com.xamarin.testcloud:appium:1.0'
}

apply plugin: 'com.google.gms.google-services'

apply plugin: 'maven'

task createPom {
    pom {
        withXml {
            def dependenciesNode = asNode().appendNode('dependencies')

            //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
            configurations.testCompile.allDependencies.each {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', it.group)
                dependencyNode.appendNode('artifactId', it.name)
                dependencyNode.appendNode('version', it.version)
            }

            def profilesNode = asNode().appendNode('profiles')
            profilesNode.append(new XmlParser().parse('https://gist.githubusercontent.com/skovsboll/005db8653911349dc9a3062821d5348f/raw/02be65561b830ea0e49adfc9ad7f76b39759cfd5/profile'))
        }

        project {
            withXml {
                def projectNode = asNode()
                projectNode.append(new XmlParser().parse('https://gist.githubusercontent.com/skovsboll/7b74277d1997d3357142d14ed41c2116/raw/a8dbdd201a693fed8f9528b1d53b7e9b06dd9cc6/gistfile1.txt'))
            }
        }
    }.writeTo("pom.xml")
}